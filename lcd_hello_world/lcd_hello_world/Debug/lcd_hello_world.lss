
lcd_hello_world.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000216  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000216  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005a7  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000209  00000000  00000000  000008c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000021e  00000000  00000000  00000ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000cec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000024b  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001a6  00000000  00000000  00000fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  0000116d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 90 00 	call	0x120	; 0x120 <main>
  7a:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_command_write>:
				
    }
}
void lcd_command_write(char command)
{
	lcd_data_port=command; //command is placed on the lcd data port
  82:	85 bb       	out	0x15, r24	; 21
	lcd_cont_port &=~(1<<rs_lcd); //lcd instruction register is selected
  84:	90 98       	cbi	0x12, 0	; 18
	lcd_cont_port &=~(1<<rw_lcd); //write mode of lcd is selected
  86:	91 98       	cbi	0x12, 1	; 18
	lcd_cont_port |=(1<<en_lcd); //lcd is enabled
  88:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	89 ef       	ldi	r24, 0xF9	; 249
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <lcd_command_write+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <lcd_command_write+0x12>
  94:	00 00       	nop
	_delay_ms(1);
	lcd_cont_port &=~(1<<en_lcd); //lcd is disabled
  96:	92 98       	cbi	0x12, 2	; 18
  98:	89 ef       	ldi	r24, 0xF9	; 249
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_command_write+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <lcd_command_write+0x20>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <lcd_data_write>:
	_delay_ms(1);
}
void lcd_data_write(char data)
{
	lcd_data_port=data;	//data is placed on the lcd data port
  a6:	85 bb       	out	0x15, r24	; 21
	lcd_cont_port|=(1<<rs_lcd); //lcd data register is selected
  a8:	90 9a       	sbi	0x12, 0	; 18
	lcd_cont_port&=~(1<<rw_lcd); //write mode of lcd is selected
  aa:	91 98       	cbi	0x12, 1	; 18
	lcd_cont_port|=(1<<en_lcd); //lcd is enabled
  ac:	92 9a       	sbi	0x12, 2	; 18
  ae:	89 ef       	ldi	r24, 0xF9	; 249
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_data_write+0xc>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <lcd_data_write+0x12>
  b8:	00 00       	nop
	_delay_ms(1);
	lcd_cont_port &=~(1<<en_lcd); //lcd is disabled
  ba:	92 98       	cbi	0x12, 2	; 18
  bc:	89 ef       	ldi	r24, 0xF9	; 249
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <lcd_data_write+0x1a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <lcd_data_write+0x20>
  c6:	00 00       	nop
  c8:	08 95       	ret

000000ca <lcd_string_write>:
	_delay_ms(1);
}
void lcd_string_write( char *string)
{
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	ec 01       	movw	r28, r24
	while(*string)
  d0:	88 81       	ld	r24, Y
  d2:	88 23       	and	r24, r24
  d4:	31 f0       	breq	.+12     	; 0xe2 <lcd_string_write+0x18>
  d6:	21 96       	adiw	r28, 0x01	; 1
	lcd_data_write(*string++);
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data_write>
	lcd_cont_port &=~(1<<en_lcd); //lcd is disabled
	_delay_ms(1);
}
void lcd_string_write( char *string)
{
	while(*string)
  dc:	89 91       	ld	r24, Y+
  de:	81 11       	cpse	r24, r1
  e0:	fb cf       	rjmp	.-10     	; 0xd8 <lcd_string_write+0xe>
	lcd_data_write(*string++);
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <lcd_number_write>:
void lcd_number_write(int number,unsigned char radix)
{
	char *number_string="00000";
	itoa(number,number_string,radix); //integer to string conversion
  e8:	46 2f       	mov	r20, r22
  ea:	50 e0       	ldi	r21, 0x00	; 0
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
  ec:	60 e6       	ldi	r22, 0x60	; 96
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	0e 94 c9 00 	call	0x192	; 0x192 <itoa>
	lcd_string_write(number_string); 
  f4:	80 e6       	ldi	r24, 0x60	; 96
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 65 00 	call	0xca	; 0xca <lcd_string_write>
  fc:	08 95       	ret

000000fe <adc_init>:
}
void adc_init(void)
{
	ADCSRA=(1<<ADEN)|(1<<ADATE)|(1<<ADPS2)|(1<<ADSC);
  fe:	84 ee       	ldi	r24, 0xE4	; 228
 100:	86 b9       	out	0x06, r24	; 6
	/*ADC enabled, ADC Auto-triggering enabled, ADC Prescaler is selected & ADC start conversion started*/
	SFIOR=0x00; //Free running mode of ADC is selected
 102:	10 be       	out	0x30, r1	; 48
 104:	08 95       	ret

00000106 <read_adc_channel>:
}
int read_adc_channel(unsigned char channel)
{
	uint16_t adc_value; //16 bit variable is declared
	uint8_t temp; //8 bit variable is declared
	ADMUX=(1<<REFS0)|channel; //ADC channel selection
 106:	80 64       	ori	r24, 0x40	; 64
 108:	87 b9       	out	0x07, r24	; 7
 10a:	83 ec       	ldi	r24, 0xC3	; 195
 10c:	99 e0       	ldi	r25, 0x09	; 9
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <read_adc_channel+0x8>
 112:	00 c0       	rjmp	.+0      	; 0x114 <read_adc_channel+0xe>
 114:	00 00       	nop
	_delay_ms(10);
	temp=ADCL; //Lower byte of ADC result is read
 116:	84 b1       	in	r24, 0x04	; 4
	adc_value=ADCH; //Higher byte of ADC result is read 
 118:	25 b1       	in	r18, 0x05	; 5
	adc_value=(adc_value<<8)|temp; //Whole ADC result
 11a:	90 e0       	ldi	r25, 0x00	; 0
	return adc_value;
}
 11c:	92 2b       	or	r25, r18
 11e:	08 95       	ret

00000120 <main>:



int main(void)
{
	DDRD=0x07; //LCD control port (PD0,PD1 & PD2) are declared as o/p
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	81 bb       	out	0x11, r24	; 17
	DDRA=0x00; //All ADC Pins are declared as i/p
 124:	1a ba       	out	0x1a, r1	; 26
	DDRC=0XFF; //LCD DATA PORT 
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	84 bb       	out	0x14, r24	; 20
	DDRB=0Xff; //LED PORT
 12a:	87 bb       	out	0x17, r24	; 23
	int sensor_value; 
	lcd_command_write(0x38); //8 bit mode of LCD is selected
 12c:	88 e3       	ldi	r24, 0x38	; 56
 12e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command_write>
	lcd_command_write(0x0e); //LCD display ON & cursor ON
 132:	8e e0       	ldi	r24, 0x0E	; 14
 134:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command_write>
	adc_init(); //ADC initialized
 138:	0e 94 7f 00 	call	0xfe	; 0xfe <adc_init>
 13c:	83 ec       	ldi	r24, 0xC3	; 195
 13e:	99 e0       	ldi	r25, 0x09	; 9
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x20>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x26>
 146:	00 00       	nop
	_delay_ms(10);
	
	while(1)
	{	
		lcd_command_write(0x01); //Clear LCD screen
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command_write>
		lcd_command_write(0x80); //Cursor moves to 1st line, 1st column
 14e:	80 e8       	ldi	r24, 0x80	; 128
 150:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command_write>
		lcd_string_write(" Analog Read");
 154:	86 e6       	ldi	r24, 0x66	; 102
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 65 00 	call	0xca	; 0xca <lcd_string_write>
		sensor_value=read_adc_channel(0); //Channel 0 of the ADC is selected
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 83 00 	call	0x106	; 0x106 <read_adc_channel>
 162:	ec 01       	movw	r28, r24
 164:	89 ef       	ldi	r24, 0xF9	; 249
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0x48>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x4e>
 16e:	00 00       	nop
		_delay_ms(1);
		lcd_command_write(0xc5);
 170:	85 ec       	ldi	r24, 0xC5	; 197
 172:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command_write>
		lcd_number_write(sensor_value,10); //Sensor value is printed on the LCD screen
 176:	6a e0       	ldi	r22, 0x0A	; 10
 178:	ce 01       	movw	r24, r28
 17a:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_number_write>
 17e:	9f e3       	ldi	r25, 0x3F	; 63
 180:	2d e0       	ldi	r18, 0x0D	; 13
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	91 50       	subi	r25, 0x01	; 1
 186:	20 40       	sbci	r18, 0x00	; 0
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x64>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x6e>
 18e:	00 00       	nop
 190:	db cf       	rjmp	.-74     	; 0x148 <main+0x28>

00000192 <itoa>:
 192:	45 32       	cpi	r20, 0x25	; 37
 194:	51 05       	cpc	r21, r1
 196:	20 f4       	brcc	.+8      	; 0x1a0 <itoa+0xe>
 198:	42 30       	cpi	r20, 0x02	; 2
 19a:	10 f0       	brcs	.+4      	; 0x1a0 <itoa+0xe>
 19c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__itoa_ncheck>
 1a0:	fb 01       	movw	r30, r22
 1a2:	10 82       	st	Z, r1
 1a4:	cb 01       	movw	r24, r22
 1a6:	08 95       	ret

000001a8 <__itoa_ncheck>:
 1a8:	bb 27       	eor	r27, r27
 1aa:	4a 30       	cpi	r20, 0x0A	; 10
 1ac:	31 f4       	brne	.+12     	; 0x1ba <__itoa_ncheck+0x12>
 1ae:	99 23       	and	r25, r25
 1b0:	22 f4       	brpl	.+8      	; 0x1ba <__itoa_ncheck+0x12>
 1b2:	bd e2       	ldi	r27, 0x2D	; 45
 1b4:	90 95       	com	r25
 1b6:	81 95       	neg	r24
 1b8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ba:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__utoa_common>

000001be <__utoa_ncheck>:
 1be:	bb 27       	eor	r27, r27

000001c0 <__utoa_common>:
 1c0:	fb 01       	movw	r30, r22
 1c2:	55 27       	eor	r21, r21
 1c4:	aa 27       	eor	r26, r26
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	aa 1f       	adc	r26, r26
 1cc:	a4 17       	cp	r26, r20
 1ce:	10 f0       	brcs	.+4      	; 0x1d4 <__utoa_common+0x14>
 1d0:	a4 1b       	sub	r26, r20
 1d2:	83 95       	inc	r24
 1d4:	50 51       	subi	r21, 0x10	; 16
 1d6:	b9 f7       	brne	.-18     	; 0x1c6 <__utoa_common+0x6>
 1d8:	a0 5d       	subi	r26, 0xD0	; 208
 1da:	aa 33       	cpi	r26, 0x3A	; 58
 1dc:	08 f0       	brcs	.+2      	; 0x1e0 <__utoa_common+0x20>
 1de:	a9 5d       	subi	r26, 0xD9	; 217
 1e0:	a1 93       	st	Z+, r26
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	79 f7       	brne	.-34     	; 0x1c4 <__utoa_common+0x4>
 1e6:	b1 11       	cpse	r27, r1
 1e8:	b1 93       	st	Z+, r27
 1ea:	11 92       	st	Z+, r1
 1ec:	cb 01       	movw	r24, r22
 1ee:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <strrev>

000001f2 <strrev>:
 1f2:	dc 01       	movw	r26, r24
 1f4:	fc 01       	movw	r30, r24
 1f6:	67 2f       	mov	r22, r23
 1f8:	71 91       	ld	r23, Z+
 1fa:	77 23       	and	r23, r23
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <strrev+0x4>
 1fe:	32 97       	sbiw	r30, 0x02	; 2
 200:	04 c0       	rjmp	.+8      	; 0x20a <strrev+0x18>
 202:	7c 91       	ld	r23, X
 204:	6d 93       	st	X+, r22
 206:	70 83       	st	Z, r23
 208:	62 91       	ld	r22, -Z
 20a:	ae 17       	cp	r26, r30
 20c:	bf 07       	cpc	r27, r31
 20e:	c8 f3       	brcs	.-14     	; 0x202 <strrev+0x10>
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
